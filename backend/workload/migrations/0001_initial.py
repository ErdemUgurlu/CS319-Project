# Generated by Django 5.2 on 2025-05-03 13:25

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_user_department_user_temp_password_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TAWorkload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_term', models.CharField(help_text='e.g. Fall 2023', max_length=20)),
                ('max_weekly_hours', models.PositiveIntegerField(default=20, help_text='Maximum allowed weekly hours for this TA')),
                ('total_assigned_hours', models.FloatField(default=0.0, help_text='Total hours assigned across all activities')),
                ('current_weekly_hours', models.FloatField(default=0.0, help_text='Current weekly hours based on active assignments')),
                ('is_overloaded', models.BooleanField(default=False)),
                ('overload_approved', models.BooleanField(default=False)),
                ('overload_approved_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ta_workloads', to='accounts.department')),
                ('overload_approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_overloads', to=settings.AUTH_USER_MODEL)),
                ('ta', models.ForeignKey(limit_choices_to={'role': 'TA'}, on_delete=django.db.models.deletion.CASCADE, related_name='workloads', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkloadActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('LECTURE', 'Lecture Assistance'), ('LAB', 'Laboratory Session'), ('OFFICE_HOURS', 'Office Hours'), ('GRADING', 'Grading/Assessment'), ('PROCTORING', 'Exam Proctoring'), ('PREP', 'Course Preparation'), ('MEETING', 'Staff Meeting'), ('OTHER', 'Other Activity')], max_length=20)),
                ('description', models.CharField(max_length=255)),
                ('hours', models.FloatField(help_text='Hours per occurrence', validators=[django.core.validators.MinValueValidator(0.25)])),
                ('weighted_hours', models.FloatField(help_text='Hours after applying policy weights')),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.CharField(choices=[('ONCE', 'One-time'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('BIWEEKLY', 'Bi-weekly'), ('MONTHLY', 'Monthly')], default='ONCE', max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('course_code', models.CharField(blank=True, max_length=20)),
                ('section', models.CharField(blank=True, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('workload', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='workload.taworkload')),
            ],
        ),
        migrations.CreateModel(
            name='WorkloadPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_term', models.CharField(help_text='e.g. Fall 2023', max_length=20)),
                ('max_hours_phd', models.PositiveIntegerField(default=20, help_text='Maximum weekly hours for PhD TAs')),
                ('max_hours_msc', models.PositiveIntegerField(default=15, help_text='Maximum weekly hours for MSc TAs')),
                ('max_hours_undergrad', models.PositiveIntegerField(default=10, help_text='Maximum weekly hours for Undergraduate TAs')),
                ('lecture_weight', models.FloatField(default=1.0, help_text='Weight multiplier for lecture hours', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('lab_weight', models.FloatField(default=1.0, help_text='Weight multiplier for lab hours', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('grading_weight', models.FloatField(default=1.0, help_text='Weight multiplier for grading hours', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('office_hours_weight', models.FloatField(default=1.0, help_text='Weight multiplier for office hours', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('exam_period_multiplier', models.FloatField(default=1.5, help_text='Multiplier for workload during exam periods', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(3.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workload_policies', to='accounts.department')),
            ],
            options={
                'unique_together': {('department', 'academic_term')},
            },
        ),
        migrations.AddField(
            model_name='taworkload',
            name='policy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ta_workloads', to='workload.workloadpolicy'),
        ),
        migrations.AlterUniqueTogether(
            name='taworkload',
            unique_together={('ta', 'academic_term', 'department')},
        ),
    ]
